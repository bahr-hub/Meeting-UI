// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Model.Models;

namespace Model.Migrations
{
    [DbContext(typeof(BaseDataBaseContext))]
    [Migration("20191111140311_UpdateBackUp")]
    partial class UpdateBackUp
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Model.Models.AggregatedCounter", b =>
                {
                    b.Property<string>("Key")
                        .HasMaxLength(100);

                    b.Property<DateTime?>("ExpireAt")
                        .HasColumnType("datetime");

                    b.Property<long>("Value");

                    b.HasKey("Key")
                        .HasName("PK_HangFire_CounterAggregated");

                    b.HasIndex("ExpireAt")
                        .HasName("IX_HangFire_AggregatedCounter_ExpireAt")
                        .HasFilter("([ExpireAt] IS NOT NULL)");

                    b.ToTable("AggregatedCounter","HangFire");
                });

            modelBuilder.Entity("Model.Models.Hash", b =>
                {
                    b.Property<string>("Key")
                        .HasMaxLength(100);

                    b.Property<string>("Field")
                        .HasMaxLength(100);

                    b.Property<DateTime?>("ExpireAt");

                    b.Property<string>("Value");

                    b.HasKey("Key", "Field")
                        .HasName("PK_HangFire_Hash");

                    b.HasIndex("ExpireAt")
                        .HasName("IX_HangFire_Hash_ExpireAt")
                        .HasFilter("([ExpireAt] IS NOT NULL)");

                    b.ToTable("Hash","HangFire");
                });

            modelBuilder.Entity("Model.Models.Job", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Arguments")
                        .IsRequired();

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("ExpireAt")
                        .HasColumnType("datetime");

                    b.Property<string>("InvocationData")
                        .IsRequired();

                    b.Property<long?>("StateId");

                    b.Property<string>("StateName")
                        .HasMaxLength(20);

                    b.HasKey("Id");

                    b.HasIndex("StateName")
                        .HasName("IX_HangFire_Job_StateName")
                        .HasFilter("([StateName] IS NOT NULL)");

                    b.HasIndex("StateName", "ExpireAt")
                        .HasName("IX_HangFire_Job_ExpireAt")
                        .HasFilter("([ExpireAt] IS NOT NULL)");

                    b.ToTable("Job","HangFire");
                });

            modelBuilder.Entity("Model.Models.JobParameter", b =>
                {
                    b.Property<long>("JobId");

                    b.Property<string>("Name")
                        .HasMaxLength(40);

                    b.Property<string>("Value");

                    b.HasKey("JobId", "Name")
                        .HasName("PK_HangFire_JobParameter");

                    b.ToTable("JobParameter","HangFire");
                });

            modelBuilder.Entity("Model.Models.JobQueue", b =>
                {
                    b.Property<string>("Queue")
                        .HasMaxLength(50);

                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("FetchedAt")
                        .HasColumnType("datetime");

                    b.Property<long>("JobId");

                    b.HasKey("Queue", "Id")
                        .HasName("PK_HangFire_JobQueue");

                    b.ToTable("JobQueue","HangFire");
                });

            modelBuilder.Entity("Model.Models.Language", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("ID");

                    b.Property<string>("Code")
                        .HasMaxLength(50);

                    b.Property<string>("Text")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("Language");
                });

            modelBuilder.Entity("Model.Models.List", b =>
                {
                    b.Property<string>("Key")
                        .HasMaxLength(100);

                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("ExpireAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Value");

                    b.HasKey("Key", "Id")
                        .HasName("PK_HangFire_List");

                    b.HasIndex("ExpireAt")
                        .HasName("IX_HangFire_List_ExpireAt")
                        .HasFilter("([ExpireAt] IS NOT NULL)");

                    b.ToTable("List","HangFire");
                });

            modelBuilder.Entity("Model.Models.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<Guid?>("CreatedBy");

                    b.Property<string>("Description");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("NameAr")
                        .IsRequired()
                        .HasColumnName("NameAR")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<Guid?>("UpdatedBy");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("Location");
                });

            modelBuilder.Entity("Model.Models.Meeting", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnName("ID");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<Guid>("CreatedBy");

                    b.Property<DateTime?>("EndedAt");

                    b.Property<DateTime>("From");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("LocationId")
                        .HasColumnName("LocationID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Notes");

                    b.Property<DateTime?>("PostponedTo");

                    b.Property<int?>("ProjectId")
                        .HasColumnName("ProjectID");

                    b.Property<DateTime?>("StartedAt");

                    b.Property<int>("Status");

                    b.Property<DateTime>("To");

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<Guid?>("UpdatedBy");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("LocationId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("Meeting");
                });

            modelBuilder.Entity("Model.Models.MeetingParticipant", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnName("ID");

                    b.Property<bool>("IsReminded");

                    b.Property<bool?>("JoinedMeeting");

                    b.Property<DateTime?>("JoinedMeetingTime");

                    b.Property<Guid>("MeetingId")
                        .HasColumnName("MeetingID");

                    b.Property<Guid>("ParticipantId")
                        .HasColumnName("ParticipantID");

                    b.Property<bool?>("Response");

                    b.HasKey("Id");

                    b.HasIndex("MeetingId");

                    b.HasIndex("ParticipantId");

                    b.ToTable("MeetingParticipant");
                });

            modelBuilder.Entity("Model.Models.MeetingTag", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnName("ID");

                    b.Property<Guid>("MeetingId")
                        .HasColumnName("MeetingID");

                    b.Property<int>("TagId")
                        .HasColumnName("TagID");

                    b.HasKey("Id");

                    b.HasIndex("MeetingId");

                    b.HasIndex("TagId");

                    b.ToTable("MeetingTag");
                });

            modelBuilder.Entity("Model.Models.MeetingTask", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnName("ID");

                    b.Property<Guid>("AssigneeId")
                        .HasColumnName("AssigneeID");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<Guid>("CreatedBy");

                    b.Property<DateTime>("DueDate");

                    b.Property<Guid>("MeetingId")
                        .HasColumnName("MeetingID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("Status");

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<Guid?>("UpdatedBy");

                    b.HasKey("Id");

                    b.HasIndex("AssigneeId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("MeetingId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("MeetingTask");
                });

            modelBuilder.Entity("Model.Models.MeetingTopic", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnName("ID");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<Guid>("CreatedBy");

                    b.Property<int>("Duration");

                    b.Property<Guid>("FkMeetingId")
                        .HasColumnName("FK_MeetingID");

                    b.Property<bool>("IsClosed");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<Guid>("PresenterId")
                        .HasColumnName("PresenterID");

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<Guid?>("UpdatedBy");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("FkMeetingId");

                    b.HasIndex("PresenterId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("MeetingTopic");
                });

            modelBuilder.Entity("Model.Models.Module", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("Module");
                });

            modelBuilder.Entity("Model.Models.ModulePrivilege", b =>
                {
                    b.Property<int>("FkPrivilegeId")
                        .HasColumnName("FK_PrivilegeID");

                    b.Property<int>("FkModuleId")
                        .HasColumnName("FK_ModuleID");

                    b.HasKey("FkPrivilegeId", "FkModuleId");

                    b.HasIndex("FkModuleId");

                    b.ToTable("ModulePrivilege");
                });

            modelBuilder.Entity("Model.Models.Notification", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnName("ID");

                    b.Property<DateTime>("DateTime");

                    b.Property<string>("Message")
                        .IsRequired();

                    b.Property<Guid>("UserId")
                        .HasColumnName("UserID");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Notification");
                });

            modelBuilder.Entity("Model.Models.Privilege", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("Privilege");
                });

            modelBuilder.Entity("Model.Models.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<Guid?>("CreatedBy");

                    b.Property<string>("Description");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<Guid?>("UpdatedBy");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("Project");
                });

            modelBuilder.Entity("Model.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<Guid?>("CreatedBy");

                    b.Property<string>("Description");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<Guid?>("UpdatedBy");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("Role");
                });

            modelBuilder.Entity("Model.Models.RoleModulePrivilege", b =>
                {
                    b.Property<int>("FkPrivilegeId")
                        .HasColumnName("FK_PrivilegeID");

                    b.Property<int>("FkModuleId")
                        .HasColumnName("FK_ModuleID");

                    b.Property<int>("FkRoleId")
                        .HasColumnName("FK_RoleID");

                    b.HasKey("FkPrivilegeId", "FkModuleId", "FkRoleId")
                        .HasName("PK_UserGroupPrivilege");

                    b.HasIndex("FkModuleId");

                    b.HasIndex("FkRoleId");

                    b.ToTable("RoleModulePrivilege");
                });

            modelBuilder.Entity("Model.Models.Schema", b =>
                {
                    b.Property<int>("Version");

                    b.HasKey("Version")
                        .HasName("PK_HangFire_Schema");

                    b.ToTable("Schema","HangFire");
                });

            modelBuilder.Entity("Model.Models.Server", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(100);

                    b.Property<string>("Data");

                    b.Property<DateTime>("LastHeartbeat")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("LastHeartbeat")
                        .HasName("IX_HangFire_Server_LastHeartbeat");

                    b.ToTable("Server","HangFire");
                });

            modelBuilder.Entity("Model.Models.Set", b =>
                {
                    b.Property<string>("Key")
                        .HasMaxLength(100);

                    b.Property<string>("Value")
                        .HasMaxLength(256);

                    b.Property<DateTime?>("ExpireAt")
                        .HasColumnType("datetime");

                    b.Property<double>("Score");

                    b.HasKey("Key", "Value")
                        .HasName("PK_HangFire_Set");

                    b.HasIndex("ExpireAt")
                        .HasName("IX_HangFire_Set_ExpireAt")
                        .HasFilter("([ExpireAt] IS NOT NULL)");

                    b.HasIndex("Key", "Score")
                        .HasName("IX_HangFire_Set_Score");

                    b.ToTable("Set","HangFire");
                });

            modelBuilder.Entity("Model.Models.State", b =>
                {
                    b.Property<long>("JobId");

                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Data");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<string>("Reason")
                        .HasMaxLength(100);

                    b.HasKey("JobId", "Id")
                        .HasName("PK_HangFire_State");

                    b.ToTable("State","HangFire");
                });

            modelBuilder.Entity("Model.Models.SystemConfiguration", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("ID");

                    b.Property<int>("AuthenticationMode");

                    b.Property<int>("EndOfWorkDays");

                    b.Property<bool>("IntegrationWithGoogleCalendar");

                    b.Property<int>("MaxMeetingTime");

                    b.Property<int>("StartOfWorkDays");

                    b.Property<string>("TimeZone")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("SystemConfiguration");
                });

            modelBuilder.Entity("Model.Models.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<Guid?>("CreatedBy");

                    b.Property<string>("Description");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<Guid?>("UpdatedBy");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("Tag");
                });

            modelBuilder.Entity("Model.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnName("ID");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<Guid?>("CreatedBy");

                    b.Property<string>("Email")
                        .IsRequired();

                    b.Property<Guid?>("FkUserConfigurationId");

                    b.Property<Guid>("FkUserProfileId")
                        .HasColumnName("FK_UserProfileID");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsAdmin");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsSuperAdmin");

                    b.Property<string>("Mobile")
                        .HasMaxLength(50);

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("Password")
                        .IsRequired();

                    b.Property<string>("Phone")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<Guid?>("UpdatedBy");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("FkUserConfigurationId")
                        .HasName("IX_User_FK_UserConfigurationID");

                    b.HasIndex("FkUserProfileId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("User");
                });

            modelBuilder.Entity("Model.Models.UserConfiguration", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnName("ID");

                    b.Property<bool?>("IntegrationWithGoogleCalendar");

                    b.Property<int?>("LanguageId")
                        .HasColumnName("LanguageID");

                    b.Property<int?>("ReminderBeforeMeeting");

                    b.Property<string>("TimeZone")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("LanguageId")
                        .HasName("IX_UserConfiguration_FK_LanguageID");

                    b.ToTable("UserConfiguration");
                });

            modelBuilder.Entity("Model.Models.UserProfile", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnName("ID");

                    b.Property<string>("Address");

                    b.Property<string>("CountryCode")
                        .HasMaxLength(50);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<Guid?>("CreatedBy");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int?>("Gender");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("LastName")
                        .HasMaxLength(50);

                    b.Property<string>("Photo");

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<Guid?>("UpdatedBy");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("UserProfile");
                });

            modelBuilder.Entity("Model.Models.UserRole", b =>
                {
                    b.Property<Guid>("FkUserId")
                        .HasColumnName("FK_UserID");

                    b.Property<int>("FkRoleId")
                        .HasColumnName("FK_RoleID");

                    b.HasKey("FkUserId", "FkRoleId")
                        .HasName("PK_UserGroupUser");

                    b.HasIndex("FkRoleId");

                    b.ToTable("UserRole");
                });

            modelBuilder.Entity("Model.Models.Vacation", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnName("ID");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<Guid?>("CreatedBy");

                    b.Property<DateTime>("EndDate");

                    b.Property<Guid>("FkUserId")
                        .HasColumnName("FK_UserID");

                    b.Property<DateTime>("StartDate");

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<Guid?>("UpdatedBy");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy")
                        .HasName("IX_Vacations_CreatedBy");

                    b.HasIndex("FkUserId")
                        .HasName("IX_Vacations_FK_UserID");

                    b.HasIndex("UpdatedBy")
                        .HasName("IX_Vacations_UpdatedBy");

                    b.ToTable("Vacation");
                });

            modelBuilder.Entity("Model.Models.JobParameter", b =>
                {
                    b.HasOne("Model.Models.Job", "Job")
                        .WithMany("JobParameter")
                        .HasForeignKey("JobId")
                        .HasConstraintName("FK_HangFire_JobParameter_Job")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Model.Models.Location", b =>
                {
                    b.HasOne("Model.Models.User", "CreatedByNavigation")
                        .WithMany("LocationCreatedByNavigation")
                        .HasForeignKey("CreatedBy")
                        .HasConstraintName("FK_Location_Creator");

                    b.HasOne("Model.Models.User", "UpdatedByNavigation")
                        .WithMany("LocationUpdatedByNavigation")
                        .HasForeignKey("UpdatedBy")
                        .HasConstraintName("FK_Location_Updator");
                });

            modelBuilder.Entity("Model.Models.Meeting", b =>
                {
                    b.HasOne("Model.Models.User", "CreatedByNavigation")
                        .WithMany("MeetingCreatedByNavigation")
                        .HasForeignKey("CreatedBy")
                        .HasConstraintName("FK_Meeting_Creator");

                    b.HasOne("Model.Models.Location", "Location")
                        .WithMany("Meeting")
                        .HasForeignKey("LocationId")
                        .HasConstraintName("FK_Meeting_Location");

                    b.HasOne("Model.Models.Project", "Project")
                        .WithMany("Meeting")
                        .HasForeignKey("ProjectId")
                        .HasConstraintName("FK_Meeting_Project");

                    b.HasOne("Model.Models.User", "UpdatedByNavigation")
                        .WithMany("MeetingUpdatedByNavigation")
                        .HasForeignKey("UpdatedBy")
                        .HasConstraintName("FK_Meeting_Updator");
                });

            modelBuilder.Entity("Model.Models.MeetingParticipant", b =>
                {
                    b.HasOne("Model.Models.Meeting", "Meeting")
                        .WithMany("MeetingParticipant")
                        .HasForeignKey("MeetingId")
                        .HasConstraintName("FK_MeetingParticipant_Meeting");

                    b.HasOne("Model.Models.User", "Participant")
                        .WithMany("MeetingParticipant")
                        .HasForeignKey("ParticipantId")
                        .HasConstraintName("FK_MeetingParticipant_User");
                });

            modelBuilder.Entity("Model.Models.MeetingTag", b =>
                {
                    b.HasOne("Model.Models.Meeting", "Meeting")
                        .WithMany("MeetingTag")
                        .HasForeignKey("MeetingId")
                        .HasConstraintName("FK_MeetingTag_Meeting");

                    b.HasOne("Model.Models.Tag", "Tag")
                        .WithMany("MeetingTag")
                        .HasForeignKey("TagId")
                        .HasConstraintName("FK_MeetingTag_Tag");
                });

            modelBuilder.Entity("Model.Models.MeetingTask", b =>
                {
                    b.HasOne("Model.Models.User", "Assignee")
                        .WithMany("MeetingTaskAssignee")
                        .HasForeignKey("AssigneeId")
                        .HasConstraintName("FK_MeetingTasks_Assignee");

                    b.HasOne("Model.Models.User", "CreatedByNavigation")
                        .WithMany("MeetingTaskCreatedByNavigation")
                        .HasForeignKey("CreatedBy")
                        .HasConstraintName("FK_MeetingTasks_Creator");

                    b.HasOne("Model.Models.Meeting", "Meeting")
                        .WithMany("MeetingTask")
                        .HasForeignKey("MeetingId")
                        .HasConstraintName("FK_MeetingTasks_Meeting");

                    b.HasOne("Model.Models.User", "UpdatedByNavigation")
                        .WithMany("MeetingTaskUpdatedByNavigation")
                        .HasForeignKey("UpdatedBy")
                        .HasConstraintName("FK_MeetingTasks_Updator");
                });

            modelBuilder.Entity("Model.Models.MeetingTopic", b =>
                {
                    b.HasOne("Model.Models.User", "CreatedByNavigation")
                        .WithMany("MeetingTopicCreatedByNavigation")
                        .HasForeignKey("CreatedBy")
                        .HasConstraintName("FK_Topic_Creator");

                    b.HasOne("Model.Models.Meeting", "FkMeeting")
                        .WithMany("MeetingTopic")
                        .HasForeignKey("FkMeetingId")
                        .HasConstraintName("FK_MeetingTopic_Meeting");

                    b.HasOne("Model.Models.User", "Presenter")
                        .WithMany("MeetingTopicPresenter")
                        .HasForeignKey("PresenterId")
                        .HasConstraintName("FK_Topic_Presenter");

                    b.HasOne("Model.Models.User", "UpdatedByNavigation")
                        .WithMany("MeetingTopicUpdatedByNavigation")
                        .HasForeignKey("UpdatedBy")
                        .HasConstraintName("FK_Topic_Updator");
                });

            modelBuilder.Entity("Model.Models.ModulePrivilege", b =>
                {
                    b.HasOne("Model.Models.Module", "FkModule")
                        .WithMany("ModulePrivilege")
                        .HasForeignKey("FkModuleId")
                        .HasConstraintName("FK_Privilege_Module");

                    b.HasOne("Model.Models.Privilege", "FkPrivilege")
                        .WithMany("ModulePrivilege")
                        .HasForeignKey("FkPrivilegeId")
                        .HasConstraintName("FK_Privilege_Privilege");
                });

            modelBuilder.Entity("Model.Models.Notification", b =>
                {
                    b.HasOne("Model.Models.User", "User")
                        .WithMany("Notification")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_Notification_User");
                });

            modelBuilder.Entity("Model.Models.Project", b =>
                {
                    b.HasOne("Model.Models.User", "CreatedByNavigation")
                        .WithMany("ProjectCreatedByNavigation")
                        .HasForeignKey("CreatedBy")
                        .HasConstraintName("FK_Project_Creator");

                    b.HasOne("Model.Models.User", "UpdatedByNavigation")
                        .WithMany("ProjectUpdatedByNavigation")
                        .HasForeignKey("UpdatedBy")
                        .HasConstraintName("FK_Project_Updator");
                });

            modelBuilder.Entity("Model.Models.Role", b =>
                {
                    b.HasOne("Model.Models.User", "CreatedByNavigation")
                        .WithMany("RoleCreatedByNavigation")
                        .HasForeignKey("CreatedBy")
                        .HasConstraintName("FK_Role_Creator");

                    b.HasOne("Model.Models.User", "UpdatedByNavigation")
                        .WithMany("RoleUpdatedByNavigation")
                        .HasForeignKey("UpdatedBy")
                        .HasConstraintName("FK_Role_Updator");
                });

            modelBuilder.Entity("Model.Models.RoleModulePrivilege", b =>
                {
                    b.HasOne("Model.Models.Module", "FkModule")
                        .WithMany("RoleModulePrivilege")
                        .HasForeignKey("FkModuleId")
                        .HasConstraintName("FK_RolePrivilege_Module");

                    b.HasOne("Model.Models.Privilege", "FkPrivilege")
                        .WithMany("RoleModulePrivilege")
                        .HasForeignKey("FkPrivilegeId")
                        .HasConstraintName("FK_RolePrivilege_Privilege");

                    b.HasOne("Model.Models.Role", "FkRole")
                        .WithMany("RoleModulePrivilege")
                        .HasForeignKey("FkRoleId")
                        .HasConstraintName("FK_RolePrivilege_Role");
                });

            modelBuilder.Entity("Model.Models.State", b =>
                {
                    b.HasOne("Model.Models.Job", "Job")
                        .WithMany("State")
                        .HasForeignKey("JobId")
                        .HasConstraintName("FK_HangFire_State_Job")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Model.Models.Tag", b =>
                {
                    b.HasOne("Model.Models.User", "CreatedByNavigation")
                        .WithMany("TagCreatedByNavigation")
                        .HasForeignKey("CreatedBy")
                        .HasConstraintName("FK_Tag_Creator");

                    b.HasOne("Model.Models.User", "UpdatedByNavigation")
                        .WithMany("TagUpdatedByNavigation")
                        .HasForeignKey("UpdatedBy")
                        .HasConstraintName("FK_Tag_Updator");
                });

            modelBuilder.Entity("Model.Models.User", b =>
                {
                    b.HasOne("Model.Models.User", "CreatedByNavigation")
                        .WithMany("InverseCreatedByNavigation")
                        .HasForeignKey("CreatedBy")
                        .HasConstraintName("FK_User_CreatedBy");

                    b.HasOne("Model.Models.UserConfiguration", "FkUserConfiguration")
                        .WithMany("User")
                        .HasForeignKey("FkUserConfigurationId")
                        .HasConstraintName("FK_User_UserConfiguration");

                    b.HasOne("Model.Models.UserProfile", "FkUserProfile")
                        .WithMany("User")
                        .HasForeignKey("FkUserProfileId")
                        .HasConstraintName("FK_User_UserProfile");

                    b.HasOne("Model.Models.User", "UpdatedByNavigation")
                        .WithMany("InverseUpdatedByNavigation")
                        .HasForeignKey("UpdatedBy")
                        .HasConstraintName("FK_User_ModifiedBy");
                });

            modelBuilder.Entity("Model.Models.UserProfile", b =>
                {
                    b.HasOne("Model.Models.User", "CreatedByNavigation")
                        .WithMany("UserProfileCreatedByNavigation")
                        .HasForeignKey("CreatedBy")
                        .HasConstraintName("FK_UserProfile_CreatedBy");

                    b.HasOne("Model.Models.User", "UpdatedByNavigation")
                        .WithMany("UserProfileUpdatedByNavigation")
                        .HasForeignKey("UpdatedBy")
                        .HasConstraintName("FK_UserProfile_ModifiedBy");
                });

            modelBuilder.Entity("Model.Models.UserRole", b =>
                {
                    b.HasOne("Model.Models.Role", "FkRole")
                        .WithMany("UserRole")
                        .HasForeignKey("FkRoleId")
                        .HasConstraintName("FK_UserRole_Role");

                    b.HasOne("Model.Models.User", "FkUser")
                        .WithMany("UserRole")
                        .HasForeignKey("FkUserId")
                        .HasConstraintName("FK_UserRole_User");
                });

            modelBuilder.Entity("Model.Models.Vacation", b =>
                {
                    b.HasOne("Model.Models.User", "CreatedByNavigation")
                        .WithMany("VacationCreatedByNavigation")
                        .HasForeignKey("CreatedBy")
                        .HasConstraintName("FK_Vacations_CreatedBy");

                    b.HasOne("Model.Models.User", "FkUser")
                        .WithMany("VacationFkUser")
                        .HasForeignKey("FkUserId")
                        .HasConstraintName("FK_Vacations_User");

                    b.HasOne("Model.Models.User", "UpdatedByNavigation")
                        .WithMany("VacationUpdatedByNavigation")
                        .HasForeignKey("UpdatedBy")
                        .HasConstraintName("FK_Vacations_ModifiedBy");
                });
#pragma warning restore 612, 618
        }
    }
}
